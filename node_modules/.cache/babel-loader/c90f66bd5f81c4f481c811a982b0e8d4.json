{"ast":null,"code":"import _toConsumableArray from \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/zubairsattar/Development/Ethereum/Insta-Clone/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.css';\nimport Decentragram from '../abis/Decentragram.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Non-Ethereum Browser Detected.You Should Consider Tryng Metamask!\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, decentragram, imagesCount, i, image;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; //  load Account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log(\"Accounts \", accounts[0]);\n                this.setState({\n                  account: accounts[0]\n                }); //    Get Network Id \n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                networkData = Decentragram.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                //    Connected to the Smart Contract\n                decentragram = web3.eth.Contract(Decentragram.abi, networkData.address);\n                this.setState({\n                  decentragram: decentragram\n                });\n                _context3.next = 15;\n                return decentragram.methods.imageCount().call();\n\n              case 15:\n                imagesCount = _context3.sent;\n                this.setState({\n                  imagesCount: imagesCount\n                }); //          Load up the all images\n\n                i = 1;\n\n              case 18:\n                if (!(i < imagesCount)) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                _context3.next = 21;\n                return decentragram.methods.images(i).call();\n\n              case 21:\n                image = _context3.sent;\n                this.setState({\n                  images: [].concat(_toConsumableArray(this.state.images), [image])\n                });\n\n              case 23:\n                i++;\n                _context3.next = 18;\n                break;\n\n              case 26:\n                this.setState({\n                  loading: false\n                });\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Decentragram Contract not deployed to Detected Network');\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      //   its get the file from the computer\n      event.preventDefault(); // when we submit the button it prevents to refresh the page\n\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file); // it converts the file into ipfs\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('Buffer ', _this.state.buffer);\n      };\n    };\n\n    _this.uploadImage = function (description) {\n      console.log('Submitting file to ipfs ...'); //  Adding file to IPFS\n\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log(\"IPFS Result  \", result);\n\n        if (error) {\n          console.log(result);\n          return;\n        } //   If u check picture that we are uploaded on IPFS then\n        //  https://ipfs.infura.io/ipfs/  hashValue\n\n\n        _this.setState({\n          loading: true\n        });\n\n        _this.state.decentragram.methods.uploadImage(result[0].hash, description).send({\n          from: _this.state.account\n        }).on('transactionHash', function (hash) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      decentragram: null,\n      // to store the contract\n      images: [],\n      loading: true,\n      imagesCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), this.state.loading ? React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Loading...\")) : React.createElement(Main, {\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/zubairsattar/Development/Ethereum/Insta-Clone/src/components/App.js"],"names":["React","Component","Web3","Identicon","Decentragram","Navbar","Main","ipfsClient","require","ipfs","host","port","protocol","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","networkData","networks","decentragram","Contract","abi","address","methods","imageCount","call","imagesCount","i","images","image","state","loading","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","uploadImage","description","add","error","hash","send","from","on"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.css';\nimport Decentragram from '../abis/Decentragram.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({host:'ipfs.infura.io',port:5001,protocol:'https'})\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  } \n  async loadWeb3(){\n\n    //      connect client side to metamask\n    if(window.ethereum){\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    }\n    else if(window.web3){\n      window.web3 = new Web3(window.web3.currentProvider)\n    }else{\n      window.alert(\"Non-Ethereum Browser Detected.You Should Consider Tryng Metamask!\")\n    }\n  }\n  captureFile = event =>{\n\n    //   its get the file from the computer\n    event.preventDefault();    // when we submit the button it prevents to refresh the page\n    const file = event.target.files[0];\n    const reader  = new window.FileReader()\n    reader.readAsArrayBuffer(file);\n\n\n    // it converts the file into ipfs\n    reader.onloadend=()=>{\n      this.setState({buffer:Buffer(reader.result)})\n      console.log('Buffer ',this.state.buffer)\n    }\n  }\n\n  uploadImage =  description =>{\n    console.log('Submitting file to ipfs ...')\n     //  Adding file to IPFS\n     ipfs.add(this.state.buffer,(error,result)=>{\n       console.log(\"IPFS Result  \",result);\n       if(error){\n         console.log(result);\n         return;\n       }\n       //   If u check picture that we are uploaded on IPFS then\n       //  https://ipfs.infura.io/ipfs/  hashValue\n\n       this.setState({loading:true})\n       this.state.decentragram.methods.uploadImage(result[0].hash,description).send({from:this.state.account}).on('transactionHash',(hash)=>{\n         this.setState({loading:false})\n       })\n     })\n  }\n  async loadBlockchainData(){\n    const web3 = window.web3;\n    //  load Account\n    const accounts = await web3.eth.getAccounts()\n    console.log(\"Accounts \",accounts[0]);\n    this.setState({\n      account:accounts[0]\n    })\n\n    //    Get Network Id \n    const networkId = await web3.eth.net.getId();\n    const networkData = Decentragram.networks[networkId];\n    if(networkData){\n          //    Connected to the Smart Contract\n\n      const decentragram = web3.eth.Contract(Decentragram.abi,networkData.address);\n      this.setState({decentragram:decentragram})\n\n      const imagesCount = await decentragram.methods.imageCount().call();\n      this.setState({imagesCount})\n\n            //          Load up the all images\n\n        for(var i=1;i<imagesCount;i++){\n          const image = await decentragram.methods.images(i).call()\n          this.setState({\n            images:[...this.state.images,image]\n          })\n        }\n      this.setState({loading:false})\n    }else{\n      window.alert('Decentragram Contract not deployed to Detected Network')\n    }\n  }\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      decentragram:null,   // to store the contract\n       images:[],\n       loading:true,\n       imagesCount:0\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              captureFile = {this.captureFile}\n              uploadImage = {this.uploadImage}\n            />\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}